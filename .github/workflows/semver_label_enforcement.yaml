on:
  pull_request:
    types:
      - opened
      - reopened
      - unlabeled

permissions:
  contents: write
  pull-requests: write

name: SemVer Label Enforcement

jobs:
  label:
    runs-on: ubuntu-latest
    env:
      INCREMENT_LABEL: ""
      CURRENT_VERSION: "v0.0.0"
      NEW_VERSION: "0.1.0"
      SEMVER_REGEX: '[0-9]*\.[0-9]*\.[0-9]*'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Check for "patch" Label
        if: contains(github.event.pull_request.labels.*.name, 'patch')
        run: |
          echo "Found 'patch' label."
          echo "INCREMENT_LABEL=patch" >> $GITHUB_ENV
      - name: Check for "minor" Label
        if: contains(github.event.pull_request.labels.*.name, 'minor')
        run: |
          echo "Found 'minor' label."
          echo "INCREMENT_LABEL=minor" >> $GITHUB_ENV
      - name: Check for "major" Label
        if: contains(github.event.pull_request.labels.*.name, 'major')
        run: |
          echo "Found 'major' label."
          echo "INCREMENT_LABEL=major" >> $GITHUB_ENV
      - name: Add default Label
        if: env.INCREMENT_LABEL == ''
        run: |
          increment_label=minor
          echo "INCREMENT_LABEL=$increment_label" >> $GITHUB_ENV
          echo "No valid label found. Adding '$increment_label'."
          gh pr edit $PR_NUMBER --add-label $increment_label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Determine Current Version
        run: |
          git fetch --tags
          current_version=$(git tag --list "v[0-9]*" --sort=-v:refname | head -n 1)
          if [ -n "$current_version" ]; then
            current_version=${current_version#v}
            echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
          fi
          echo "Current Version: $current_version"
      - name: Calculate New Version
        run: |
          # Extract current version$CURRENT_VERSION
          major=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          minor=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          patch=$(echo $CURRENT_VERSION | cut -d'.' -f3)

          case "$INCREMENT_LABEL" in
            major) new_version="$((major + 1)).0.0";;
            minor) new_version="$major.$((minor + 1)).0";;
            patch) new_version="$major.$minor.$((patch + 1))";;
          esac

          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New Version: v$new_version"
      - name: Check for JavaScript
        if: hashFiles('package.json') != ''
        run: |
          echo "JavaScript detected..."
          sed -i "s/\"version\": \"$SEMVER_REGEX\"/\"version\": \"$NEW_VERSION\"/" package.json
          echo "Updated package.json"
      - name: Check for .NET
        if: hashFiles('*.csproj') != ''
        run: |
          echo ".NET detected..."
          for csproj in *.csproj; do
            [ -e "$csproj" ] || continue
            sed -i 's|<Version>$SEMVER_REGEX</Version>|<Version>'$NEW_VERSION'</Version>|' "$csproj"
            echo "Updated $csproj"
          done
      - name: Check for .NET
        if: hashFiles('Directory.Build.props') != ''
        run: |
          echo ".NET detected..."
          sed -i 's|<Version>$SEMVER_REGEX</Version>|<Version>'$NEW_VERSION'</Version>|' Directory.Build.props
          echo "Updated Directory.Build.props"
      - name: Check for Python
        if: hashFiles('setup.py') != ''
        run: |
          echo "Python detected..."
          sed -i "s/version='$SEMVER_REGEX'/version='$NEW_VERSION'/" setup.py
          echo "Updated setup.py"
      - name: Check for Python
        if: hashFiles('pyproject.toml') != ''
        run: |
          echo "Python detected..."
          sed -i 's/^version = "$SEMVER_REGEX"/version = "'$NEW_VERSION'"/' pyproject.toml
          echo "Updated pyproject.toml"
      - name: Check for Java
        if: hashFiles('build.gradle') != ''
        run: |
          echo "Java detected..."
          sed -i 's/version = "$SEMVER_REGEX"/version = "'$NEW_VERSION'"/' build.gradle
          echo "Updated build.gradle"
      - name: Check for Kotlin
        if: hashFiles('build.gradle.kts') != ''
        run: |
          echo "Kotlin detected..."
          sed -i 's/version = "$SEMVER_REGEX"/version = "'$NEW_VERSION'"/' build.gradle.kts
          echo "Updated build.gradle.kts"
      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Bump version to $NEW_VERSION"
          git push -u origin HEAD
